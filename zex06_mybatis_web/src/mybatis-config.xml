<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
  
<configuration>

<!-- ...223p.properties 엘리먼트의 resource 속성을 이용하여 외부 프로퍼티 파일 로드및 공통 프로퍼티 정의.-->	
<!-- ...223p.resource 속성값은 클래스패스 기준으로 찾음.-->
<!-- ...223p.resource 속성값은 클래스패스 기준이 아닌 절대경로로 설정할 경우 : 
	      properties url="file:d:\mybatis.properties"-->
	<properties resource="mybatis.properties">
	      
<!-- ...223p.properties 엘리먼트의 resource 속성에 설정한 값을 사용할 때는 '${key}' 형태로 사용함.  
	  		 예) <property name="url"   value="${jdbc.url}"/> -->
	  <property name="jdbc.driver"   value="com.mysql.jdbc.Driver"/>
	  <property name="jdbc.username" value="mybatis"/>
	  <property name="jdbc.password" value="mybatis"/>
	</properties>

	<!-- 마이바티스의 작동 규칙정의 -->
<!-- ...223p.settings 엘리먼트를 사용해서 설정하는 각종 값은 SqlSessionFactory 객체가 
             SqlSession 객체를 만들때 생성할 객체의 특성을 결정함. 
             settings 엘리먼트의 하위 엘리먼트들은 대부분 디폴트 값을 가짐.-->
	<settings>
<!-- ...223p.cacheEnabled : 캐시를 기본으로 사용할지 여부를 결정함.
             Default : true.
             마이바티스의 기본 캐시는 분산 캐시가 아니라 로컬 캐시여서 서버가 여러대인 경우
             데이터 변경에 대해 전체 서버에 캐시를 반영하기 어려운 문제가 있음.-->
		<setting name="cacheEnabled" value="false" />

		<setting name="useGeneratedKeys" value="true" />
		
		<setting name="mapUnderscoreToCamelCase" value="true" />
		
		<setting name="autoMappingBehavior" value="PARTIAL" />
		
<!-- ...224p.lazyLoadingEnabled : 성능 개선을 위해 많이 사용하는 늦은 로딩 사용 여부.
             Default : true.
             특히 기본키를 기준으로 데이터를 가져오는 경우, 늦은 로딩이 아닌 것 처럼 
             데이터를 가져올 때 빠르기 때문에 유용함.
             
     ...224p.aggressiveLazyLoading : 이 옵션을 활성화하면 늦은 로딩을 하는 객체는 호출에 따라
             점진적으로 로딩됨.
             Default : true.
             반면, 늦은 로딩을 하지 않는 객체는 요청할 때 한 번에 모두 로딩됨.
             

     ...224p.multipleResultSetsEnabled : 한 개의 구문에서 여러 개의 결과 셋 허용 여부에 대한 옵션임.
             DB 에 따라 여려 개의 결과 셋을 한 번에 사용하는 기능을 제공하기도 함.
             https://technet.microsoft.com/ko-kr/library/ms378758.aspx
             단, 드라이버에 따라 지원 여부를 확인해서 사용해야 함.
             Default : true.
             
     ...224p.useColumnLabel : 컬럼명 대신 컬럼 라벨을 사용할지 여부.
             단, 드라이버 마다 컬럼 라벨을 다른 관점으로 보기 때문에 확인해서 사용해야 함.
             Default : true.
             
     ...224p.useGeneratedKeys : 생성 키 사용 여부를 결정함.
             MySql : auto_increment, Oracle : sequence, SQL : identify 를 생성 키로 제공함. 
             Default : false.
             
     ...224p.autoMappingBehavior : 조회 결과의 컬럼별 값을 자바 객체에 설정할 때 자동으로
             설정하는 방법을 결정함.
             선택 가능한 값은 NONE, PARTIAL, FULL.
             NONE 을 사용하면 마이바티스가 객체에 값을 자동으로 설정하지 않으므로, NONE 을
             사용할 때는 결과 매핑을 반드시 설정해야 함.
             PARTIAL 은 결과 매핑 설정이 없더라도 자동으로 객체에 값을 설정해 줌.
             FULL 은 자동으로 매핑을 하면서 중첩된 처리도 무두 해줌.
             FULL 을 사용하기 위해서는 DB 쿼리에서 컬럼별 별칭을 둘 때 ztbl_comment.comment_no 처럼
             마침표(.) 구분자를 사용할 수 있어야 함. 
             Default : PARTIAL.
             
     ...224p.defaultExecutorType : 디폴트 실행 타입을 결정함.
             선택 가능한 값은 Statement 객체를 재사용하지 않는 SIMPLE, PreparedStatement 객체를
             재사용하는 REUSE, Statement 를 재사용하고 작업을 한 번에 일괄 처리하는 BATCH 가 있음. 
             Default : SIMPLE.
             
     ...224p.defaultStatementTimeout : DB 요청을 처리하는 도중에 처리가 오래 걸릴 때 자동으로
             중지하는 타임아웃 설정임.
             대부분의 JDBC 드라이버는 DB 특성에 따라 적절한 타임아웃 설정을 갖고 있기 때문에
             드라이버 별로 정해진 값보다 짧게 가져가야 할 경우 사용함.
             양수로 설정해야 하고 초 단위임. 
             Default : JDBC 드라이버가 자체적으로 가진 값을 그대로 사용함.
             
     ...224p.mapUnderscoreToCamelCase : 관습적으로 DB 의 테이블 컬럼명은 언더바(_)구분자를 사용하고,
             Java 의 코딩 규칙은 CamelCase 를 사용함.
             DB 와 Java 는 Naming Rule 이 명확한 편이어서 일정한 규칙을 부여하면 값을 매핑할 수 있음.
             이런 경우를 위해 언더바(_) 형태를 CamelCase 표현식으로 자동 매핑할지에 대한 옵션임.
             이 옵션을 사용하지 않으면서 DB 테이블의 컬럼명은 언더바(_)로 구분하고 Java 모델 클래스는
             CamelCase 표현식으로 사용할 경우 쿼리문에 컬럼별로 별칭을 사용하거나 별도의 결과 매핑을
             사용해야 함. 
             Default : false (자동으로 매핑하지 않음).
             
     ...224p.localCacheScope : 캐시의 저장 범위를 정함.
             SqlSession 객체를 기준으로 캐시할 때는 SESSION, 구문별로 캐시할 때는 STATEMENT 를 선택함. 
             Default : SESSION.             
             
             -->		
	</settings>
	
	<!-- ...226p.typeAliases 엘리먼트 : 타입별칭 
	        XML 이 아닌 클래스 선언 위에 @Alias("ALIASED_NAME") 어노테이션을 사용할 수 있음.
	-->
	<typeAliases>
		<typeAlias type="ldg.mybatis.model.Comment" alias="Comment" />
		<typeAlias type="ldg.mybatis.model.User" alias="User" />
		<typeAlias type="ldg.mybatis.model.Reply" alias="Reply" />
		<typeAlias type="ldg.mybatis.model.CommentUser" alias="CommentUser" />
		<typeAlias type="ldg.mybatis.model.CommentReplies" alias="CommentReplies" />
	</typeAliases>

	<!-- ...228p.typeHandlers 엘리먼트 : 타입핸들러.
	        PreparedStatement 에서 파라미터를 설정하거나 결과 셋을 가져올 때 테이블 컬럼 각각의 값을
	        자바의 적절한 타입으로 설정해서 가져오기 위해 타입 핸들러를 사용함.
	        
	        별도의 타입 핸들러를 만들기 위해서는 org.apache.ibatis.type.BaseTypeHandler<T> 를 확장하여
	        구현체를 만든 후 이 구현체를 사용하게 설정함.
	        타입 핸들러를 사용해서 특별한 타입을 처리할 수 있으므로 DB 에 저장된 코드를
	        Java 의 ENUM 으로 변환하거나 암호화/복호화를 처리할 때 유용함.
	        참조 : http://iwan2fly.tistory.com/12
	<typeHandlers>
	    <typeHandler handler="ldg.mybatis.ExampleTypeHandler"/>
		<package name="ldg.mybatis.common.type"/>
	</typeHandlers>	        
	        -->

	<!-- ...231p.objectFactory 엘리먼트 : DB 테이블 간의 관계가 복잡하거나 단순히 setter() 를
	        호출하는 것 이상의 과정을 거쳐야 할 경우, 결과 데이터를 설정할 때 별도의 과정을
	        추가로 거쳐야 할 때 사용함.
	        org.apache.ibatis.reflection.factory.ObjectFactory 인터페이스를 구현하거나
	        org.apache.ibatis.reflection.factory.DefaultObjectFactory 클래스를 확장해서
	        구현체를 만들 수 있음.
	        구현체가 사용할 값을 설정하기 위해서는 objectFactory 엘리먼트의 하위 엘리먼트인
	        property 엘리먼트를 사용함.	 
	<objectFactory type="org.mybatis.example.ExampleObjectFactory">
	  <property name="someProperty" value="100"/>
	</objectFactory>       
	        -->

	
	<!-- ...232p.plugins 엘리먼트 : 마이바티스가 매핑 구문을 실행하는 과정에서 특정 시점의
	        처리를 가로채 부가적인 작업을 처리함.
	        로그를 찍거나 파라미터에 대해 공통적으로 타입 체크 또는 결과 셋에 대한 처리를
	        추가할 수 있는 AOP 와 인터셉터와 비슷한 작용을 함.
	        먼저 org.apache.ibatis.plugin.Interceptor 인터페이스를 구현해서 구현체를 만듦.
	        구현체를 사용하고 구현체의 타입을 결정하기 위해 org.apache.ibatis.plugin.Interceptors
	        어노테이션을 정의함.
	        플러그인이 작동하는 시점과 대상 객체를 지정하려면 @Intercepts 와 @Signature 를
	        사용해서 설정함. 
	-->
	<plugins>
		<plugin interceptor="ldg.mybatis.common.plugin.ExecutorPlugin">
			<property name="property" value="plugin test"/>
		</plugin>
	</plugins>
	
	<!-- ...235p.environments 엘리먼트 : 데이터베이스 연결정보 및 트랜잭션 관리.
	        마이바티스만 사용할 때 필요함.
	        스프링 연동모듈을 사용할 때는 필요없음(스프링이 알아서 관리함). -->
	<environments default="development">
		<environment id="development">
	
	<!-- ...235p.transactionManager 엘리먼트 : 트랜잭션 관리자 클래스를 설정함.
	        type 속성의 속성값 : JDBC 와 MANAGED.
	             JDBC : 마이바티스 API 에서 제공하는 commit, rollback 메서드 등을 
	                    사용해서 트랜잭션을 관리하는 방식임.
	             MANAGED : 마이바티스 API 보다는 컨테이너가 직접 트랜잭션을 관리하는 방식.
	-->
			<transactionManager type="JDBC" />
	
	<!-- ...235p.dataSource 엘리먼트 : 데이터베이스 연결정보를 설정함.
	        참조 : http://cafe.naver.com/jjdev/3600
	        type 속성의 속성값 : UNPOOLED, POOLED, JNDI.
	             UNPOOLED : DB 연결 요청할 때마다 DB 연결을 새롭게 생성하고 해제함.
	                        테스트용으로 사용하고, 운영에는 사용하지 않음.
	                        driver,
	                        url,
	                        username,
	                        password,
	                        defaultTransactionIsolationLevel : 
	                        	org.apache.ibatis.session.TransactionIsolationLevel ENUM 상수를 사용함.
	                        	격리 레벨이 낮으면 데이터의 일관성이 떨어지고,
	                        	격리 레벨이 높으면 데이터의 일관성은 좋지만 트랜잭션의 동시작업이 어려워짐.
	                        	
	                        	READ_COMMITTED : 
	                        	     다른 트랜잭션에 의해 커밋 된 데이터를 읽을 수 있음. 
	                        	     현재 트랜잭션에서 읽고 있는 동안 다른 트랜잭션에서는 읽거나 쓰기가 가능하며, 
	                        	     커밋하지 않은 트랜잭션에서 데이터를 쓰면 같은 데이터에 접근하는 모든 트랜잭션은 블록됨.
								 
								READ_UNCOMMITED : 
								     다른 트랜잭션에서 커밋하지 않은 데이터를 읽을 수 있음. 
									 현재 트랜잭션에서 커밋하지 않더라도 수정한 데이터를 다른 트랜잭션에서 읽을 수 있음.
								 
								REPEATABLED_READ : 
								    처음에 읽은 데이터와 이후 읽은 데이터가 동일함. 
									읽기 트랜잭션은 같은 데이터에 대한 수정을 모두 블록 하지만, 
									같은 데이터에 대한 읽기는 가능하며 또한 새로운 데이터 추가는 가능하게 함.
								 
								SERIALIZABLE : 
								    같은 데이터에 대해 동시에 두 개 이상의 트랜잭션이 수행될 수 없게 함. 
								    트랜잭션이 진행되는 동안 다른 트랜잭션에서 데이터를 추가할 수 없음.

	             POOLED : 서버가 시작할 때 일정 수의 DB 연결을 만들어서 POOL 이라는 메모리 영역에 넣고 관리하여
	                      매번 DB 연결을 생성하지 않아서, 대부분의 웹 애플리케이션에서 기본적으로 사용함.
	                      UNPOOLED 의 속성에 아래와 같은 속성이 추가됨.
	                      
	                        poolMaximumActiveConnections :
	                        	주어진 시간에 존재할 수 있는 활성화된(사용중인) 커넥션의 수. 디폴트는 10이다.
	                        	
							poolMaximumIdleConnections : 
								주어진 시간에 존재할 수 있는 유휴 커넥션의 수.								
								강제로 리턴되기 전에 풀에서 “체크아웃” 될 수 있는 커넥션의 시간. 디폴트는 20000ms(20 초)
								
							poolTimeToWait : 
								풀이 로그 상태를 출력하고 비정상적으로 긴 경우 커넥션을 다시 얻을려고 시도하는 로우 레벨 설정. 
							    디폴트는 20000ms(20 초).
							    
							poolPingQuery : 
								커넥션이 작업하기 좋은 상태이고 요청을 받아서 처리할 준비가 되었는지 체크하기 위해 
								데이터베이스에 던지는 핑쿼리(Ping Query). 
								디폴트는 “핑 쿼리가 없음” 이다. 
								이 설정은 대부분의 데이터베이스로 하여금 에러메시지를 보게 할수도 있다.
								
							poolPingEnabled : 
								핑쿼리를 사용할지 말지를 결정. 
								사용한다면 오류가 없는(그리고 빠른) SQL 을 사용하여 poolPingQuery 프로퍼티를 설정해야 한다. 
								디폴트는 false 이다.
								
							poolPingConnectionsNotUsedFor : 
								poolPingQuery가 얼마나 자주 사용될지 설정한다. 
								필요이상의 핑을 피하기 위해 데이터베이스의 타임아웃 값과 같을 수 있다. 
								디폴트는 0이다. 
								디폴트 값은 poolPingEnabled가 true일 경우에만 모든 커넥션이 매번 핑을 던지는 값이다.

	             JNDI : 컨테이너의 JNDI 컨텍스트를 참조함.
	             	    JNDI 는 디렉토리 서비스를 위해 자바가 제공하는 인터페이스이고, 여기서는 데이터 소스를 찾음.

	             	    JNDI 설정은 톰캣과 같은 대부분의 웹 애플리케이션 서버가 아래와 같이 제공함.
	             	    Tomcat :: server.xml
	             	    참조 : http://www.journaldev.com/2513/tomcat-datasource-jndi-example-java
							<Resource name="jdbc/MyDB" 
							      global="jdbc/MyDB" 
							      auth="Container" 
							      type="javax.sql.DataSource" 
							      driverClassName="com.mysql.jdbc.Driver" 
							      url="jdbc:mysql://localhost:3306/UserDB" 
							      username="pankaj" 
							      password="pankaj123" 
							      
							      maxActive="100" 
							      maxIdle="20" 
							      minIdle="5" 
							      maxWait="10000"/>	             	    

	             	    데이터 소스를 관리하는 주체가 자바 코드가 아니라 컨테이너를 갖는 서버이므로 설정 가능한
	             	    속성은 다음 2가지 임.
	                      
	                        initial_context : 
	                        	이 프로퍼티는 InitialContext 에서 컨텍스트를(예를 들어 initialContext.lookup(initial_context))
	                        	찾기위해 사용된다.
	                        	이 프로퍼티는 선택적인 값이다. 
	                        	이 설정을 생략하면 data_source프로퍼티가 InitialContext에서 직접 찾을 것이다.
	                        	속성값으로 java:comp/env 를 적어줄 수 있음.
	                        data_source : 
	                        	DataSource인스턴스의 참조를 찾을 수 있는 컨텍스트 경로이다. 
	                        	initial_context 룩업을 통해 리턴된 컨텍스트에서 찾을 것이다.
	                        	initial_context 가 지원되지 않는다면 InitialContext 에서 직접 찾을 것이다.
	                        	initial_context 속성을 java:comp/env 로 설정하면 data_source 속성값은 jdbc/DB_NAME 이고,
	                        	initial_context 속성을 생략하면 java:comp/env/jdbc/DB_NAME 을 모두 적어줘야 함.

	-->
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		<environment id="release">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 매퍼정의 -->
	<mappers>
		<mapper resource="ldg/mybatis/repository/mapper/CommentMapper.xml" />
		<mapper resource="ldg/mybatis/repository/mapper/CommentMapperResultMap.xml" />
		<mapper resource="ldg/mybatis/repository/mapper/CommentMapperDynamicSql.xml" />
	</mappers>
</configuration>